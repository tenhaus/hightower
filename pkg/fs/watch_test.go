package fs

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"testing"
	"time"

	"github.com/hashicorp/go.net/context"
	log "github.com/sirupsen/logrus"
)

func TestWatchFile(t *testing.T) {

	// Create a test directory to watch
	dir, err := ioutil.TempDir("", "test")

	if err != nil {
		t.Error(err)
	}

	// Clean up when we exit
	defer os.RemoveAll(dir) // clean up

	// Create a file to watch
	tmpfn := filepath.Join(dir, "tmpfile")
	content := []byte("generated by watch_test.go")
	if err := ioutil.WriteFile(tmpfn, content, 0666); err != nil {
		t.Error(err)
	}

	// Write to the file 2 seconds from now
	go func() {
		time.Sleep(2 * time.Second)
		tmpfn := filepath.Join(dir, "tmpfile")
		content := []byte("updated by watch_test.go")
		if err := ioutil.WriteFile(tmpfn, content, 0666); err != nil {
			t.Error(err)
		}
	}()

	// Create a timeout in case something goes wrong
	ctx, _ := context.WithDeadline(context.Background(), time.Now().Add(4*time.Second))
	done := make(chan bool)

	// Watch and wait
	go func() {
		err = Watch([]string{tmpfn})
		if err != nil {
			t.Error(err)
		}

		done <- true
	}()

	// Handle a timeout, error, or success
	select {
	case <-done:
		log.Debug("Received done event")
	case <-ctx.Done():
		t.Errorf("Timed out waiting for a file change")
	}
}

func TestWatchDirectory(t *testing.T) {

	// Create a test directory to watch
	dir, err := ioutil.TempDir("", "test")

	if err != nil {
		t.Error(err)
	}

	// Clean up when we exit
	defer os.RemoveAll(dir) // clean up

	// Write a file 2 seconds from now
	go func() {
		time.Sleep(2 * time.Second)
		tmpfn := filepath.Join(dir, "tmpfile")
		content := []byte("generated by watch_test.go")
		if err := ioutil.WriteFile(tmpfn, content, 0666); err != nil {
			t.Error(err)
		}
	}()

	// Create a timeout in case something goes wrong
	ctx, _ := context.WithDeadline(context.Background(), time.Now().Add(4*time.Second))
	done := make(chan bool)

	// Watch and wait
	go func() {
		err = Watch([]string{dir})
		if err != nil {
			t.Error(err)
		}

		done <- true
	}()

	// Handle a timeout, error, or success
	select {
	case <-done:
		log.Debug("Received done event")
	case <-ctx.Done():
		t.Errorf("Timed out waiting for a file change")
	}
}
